{"version":3,"sources":["actions/index.js","constants/ActionTypes.js","components/TaskForm.js","components/TaskSearch.js","components/TaskSort.js","components/TaskControl.js","components/TaskItem.js","components/TaskList.js","App.js","serviceWorker.js","reducers/tasks.js","reducers/isDisplayFrom.js","reducers/itemEditting.js","reducers/filterTable.js","reducers/search.js","reducers/sort.js","reducers/index.js","index.js"],"names":["editTask","task","type","TaskForm","props","handleChange","e","target","name","value","checked","setState","handleSubmit","preventDefault","onAddTask","state","onClear","onCloseFrom","status","id","this","itemEditting","nextProps","isDisplayFrom","className","onClick","onSubmit","onChange","required","Component","connect","dispatch","actions","TaskSearch","onSearch","keyword","placeholder","TaskSort","onclick","sortBy","sortValue","onSort","by","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","href","role","sort","TaskControl","TaskItem","onUpdateStatus","onDeleteData","onEditData","onOpenForm","onEditTask","index","TaskList","filter","filterName","filterStatus","onFilterTable","tasks","filterTable","toLowerCase","indexOf","a","b","elmTasks","map","key","search","App","onToggleFrom","onClearTask","staus","action","Boolean","window","location","hostname","match","s4","Math","floor","random","toString","substring","generateID","findIndex","result","forEach","data","JSON","parse","localStorage","getItem","initialState","myReducer","push","setItem","stringify","splice","initialStore","parseInt","combineReducers","store","createStore","myReducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3b1bff92.chunk.js","sourcesContent":["import * as types from './../constants/ActionTypes';\r\nexport const lisAll = () =>{\r\n    return {\r\n        type: types.LIST_ALL,\r\n    }\r\n}\r\nexport const addTask = (task) =>{\r\n    return {\r\n        type: types.ADD_TASK,\r\n        task\r\n    }\r\n}\r\nexport const toggleFrom = () =>{\r\n    return {\r\n        type: types.TOGGLE_FORM,\r\n    }\r\n}\r\nexport const closeFrom = () =>{\r\n    return {\r\n        type: types.CLOSE_FORM,\r\n    }\r\n}\r\nexport const openFrom = () =>{\r\n    return {\r\n        type: types.OPEN_FORM,\r\n    }\r\n}\r\n\r\nexport const updateStatus = (id) =>{\r\n    return {\r\n        type: types.UPDATE_STATUS,\r\n        id // id: id\r\n    }\r\n}\r\nexport const deleteTask = (id) =>{\r\n    return {\r\n        type: types.DELETE_TASK,\r\n        id // id: id\r\n    }\r\n}\r\nexport const editTask = (task) =>{\r\n    return {\r\n        type: types.EDIT_TASK,\r\n        task // task: task\r\n    }\r\n}\r\nexport const filterTask = (filter) =>{\r\n    return {\r\n        type: types.FILTER_TABLE,\r\n        filter // filter: filter -> filterName and filterStatus\r\n    }\r\n}\r\nexport const searchTask = (keyword) =>{\r\n    return{\r\n        type: types.SEARCH,\r\n        keyword //keyword:keyword\r\n    }\r\n}\r\nexport const sortTask = (sort) =>{\r\n    return{\r\n        type: types.SORT,\r\n        sort //sort:sort\r\n    }\r\n}\r\n","export const LIST_ALL = 'LIST_ALL';\r\nexport const ADD_TASK = 'ADD_TASK';\r\nexport const TOGGLE_FORM = 'TOGGLE_FORM';\r\nexport const CLOSE_FORM = 'CLOSE_FORM';\r\nexport const OPEN_FORM = 'OPEN_FORM';\r\nexport const UPDATE_STATUS = 'UPDATE_STATUS';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const EDIT_TASK = 'EDIT_TASK';\r\nexport const FILTER_TABLE = 'FILTER_TABLE'\r\nexport const SEARCH = 'SEARCH';\r\nexport const SORT = 'SORT';\r\n\r\n","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index'\r\n\r\nclass TaskForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      id: '',\r\n      name: '',\r\n      status: false\r\n    };\r\n  }\r\n\r\n  UNSAFE_componentWillMount() {\r\n    if (this.props.itemEditting) {\r\n      this.setState({\r\n        id: this.props.itemEditting.id,\r\n        name: this.props.itemEditting.name,\r\n        status: this.props.itemEditting.status\r\n      });\r\n    }\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    if (nextProps && nextProps.itemEditting) {\r\n      this.setState({\r\n        id: nextProps.itemEditting.id,\r\n        name: nextProps.itemEditting.name,\r\n        status: nextProps.itemEditting.status\r\n      });\r\n    } else if (!nextProps.itemEditting) {\r\n      this.setState({\r\n        id: '',\r\n        name: '',\r\n        status: false\r\n      })\r\n    }\r\n  }\r\n\r\n  handleChange = e => {\r\n    var target = e.target;\r\n    var name = target.name;\r\n    var value = target.type === 'checkbox' ? target.checked : target.value;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onAddTask(this.state);\r\n    //this.props.onSubmit(this.state);\r\n    //Canle & Close Form\r\n    this.onClear();\r\n    this.onCloseFrom();\r\n  };\r\n\r\n  onCloseFrom = () => {\r\n    this.props.onCloseFrom();\r\n  };\r\n\r\n  onClear = () => {\r\n    this.setState({\r\n      name: \"\",\r\n      status: false\r\n    });\r\n    this.onCloseFrom();\r\n  };\r\n  render() {\r\n    if (!this.props.isDisplayFrom) {\r\n      return null\r\n    }\r\n    var { id } = this.state;\r\n    return (\r\n      <div className=\"panel panel-warning\">\r\n        <div className=\"panel-heading\">\r\n          <h3 className=\"panel-title\">\r\n            {id !== \"\" ? \"Cập Nhật Công Việc\" : \"Thêm Công Việc\"}\r\n            <span\r\n              className=\"fas fa-times-circle text-right\"\r\n              onClick={this.onCloseFrom}\r\n            ></span>\r\n          </h3>\r\n        </div>\r\n        <div className=\"panel-body\">\r\n          <form onSubmit={this.handleSubmit}>\r\n            <div className=\"form-group\">\r\n              <label>Tên: </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name=\"name\"\r\n                onChange={this.handleChange}\r\n                value={this.state.name}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Trạng Thái: </label>\r\n\r\n              <select\r\n                name=\"status\"\r\n                className=\"form-control\"\r\n                onChange={this.handleChange}\r\n                value={this.state.status}\r\n              >\r\n                <option value={false}>Ẩn</option>\r\n                <option value={true}>Kích Hoạt</option>\r\n              </select>\r\n              <br />\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <button type=\"submit\" className=\"btn btn-primary\">\r\n                <span className=\"fas fa-plus\"></span> Lưu Lại\r\n              </button>\r\n              &nbsp;\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-primary\"\r\n                onClick={this.onClear}\r\n              >\r\n                <span className=\"fas fa-times\"></span> Hủy Bỏ\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isDisplayFrom: state.isDisplayFrom,\r\n    itemEditting: state.itemEditting\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n  return {\r\n    onAddTask: (task) => {\r\n      dispatch(actions.addTask(task));\r\n    },\r\n    onCloseFrom: () => {\r\n      dispatch(actions.closeFrom());\r\n    }\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskForm);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index'\r\n\r\nclass TaskSearch extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      keyword: '',\r\n    };\r\n  }\r\n\r\n  onChange = e => {\r\n    var target = e.target;\r\n    var name = target.name;\r\n    var value = target.value;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n  onSearch = () => {\r\n    this.props.onSearch(this.state.keyword);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n        <div className=\"input-group\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Search\"\r\n            name='keyword'\r\n            value={this.state.keyword}\r\n            onChange={this.onChange}\r\n          />\r\n          <span className=\"input-group-btn\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              onClick={this.onSearch}\r\n            >\r\n              <span className=\"fas fa-search\"></span> Tìm\r\n            </button>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {};\r\n}\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n  return {\r\n    onSearch: (keyword) => {\r\n      dispatch(actions.searchTask(keyword));\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskSearch);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/index';\r\n\r\nclass TaskSort extends Component {\r\n\r\n\r\n\r\n  onclick = (sortBy, sortValue) => {\r\n    this.props.onSort({\r\n      by: sortBy,\r\n      value: sortValue\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n        <div className=\"dropdown\">\r\n          <button\r\n            className=\"btn btn-primary dropdown-toggle\"\r\n            type=\"button\"\r\n            id=\"dropdownMenu1\"\r\n            data-toggle=\"dropdown\"\r\n            aria-haspopup=\"true\"\r\n            aria-expanded=\"true\"\r\n          >\r\n            Sắp Xếp <span className=\"far fa-plus-square\"></span>\r\n          </button>\r\n          <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n            <li onClick={() => this.onclick('name', 1)}>\r\n              <a href=\"# \" role=\"button\" className={(this.props.sort.by === 'name' && this.props.sort.value === 1) ? 'sort-selected' : ''}>\r\n                <span className=\"fas fa-sort-alpha-up\"> Tên A-Z</span>\r\n              </a>\r\n            </li  >\r\n            <li onClick={() => this.onclick('name', -1)}>\r\n              <a href=\"# \" role=\"button\" className={(this.props.sort.by === 'name' && this.props.sort.value === -1) ? 'sort-selected' : ''}>\r\n                <span className=\"fas fa-sort-alpha-down-alt\"> Tên Z-A</span>\r\n              </a>\r\n            </li>\r\n            <li role=\"separator\" className=\"divider\"></li>\r\n            <li onClick={() => this.onclick('status', 1)}>\r\n              <a href=\"# \" role=\"button\" className={(this.props.sort.by === 'status' && this.props.sort.value === 1) ? 'sort-selected' : ''} >Trạng Thái kích hoạt</a>\r\n            </li>\r\n            <li onClick={() => this.onclick('status', -1)}>\r\n              <a href=\"# \" role=\"button\" className={(this.props.sort.by === 'status' && this.props.sort.value === -1) ? 'sort-selected' : ''}>Trạng Thái Ẩn</a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToprops = state => {\r\n  return {\r\n    sort: state.sort\r\n  };\r\n}\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n  return {\r\n    onSort: (sort) => { //sortby, sortvalue\r\n      dispatch(actions.sortTask(sort));\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToprops, mapDispatchToProps)(TaskSort);\r\n","import React, { Component } from \"react\";\r\nimport TaskSearch from \"./TaskSearch\";\r\nimport TaskSort from \"./TaskSort\";\r\n\r\nclass TaskControl extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"row mt-15\">\r\n        <TaskSearch />\r\n        <TaskSort />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TaskControl;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index'\r\n\r\nclass TaskItem extends Component {\r\n  onUpdateStatus = () => {\r\n    this.props.onUpdateStatus(this.props.task.id);\r\n  };\r\n\r\n  onDeleteData = () => {\r\n    this.props.onDeleteData(this.props.task.id);\r\n    this.props.onCloseFrom();\r\n  };\r\n\r\n  onEditData = () => {\r\n    this.props.onOpenForm();\r\n    this.props.onEditTask(this.props.task);\r\n  }\r\n\r\n  render() {\r\n    var { task, index } = this.props;\r\n\r\n    return (\r\n      <tr>\r\n        <td>{index + 1}</td>\r\n        <td className=\"text-center\">{task.name}</td>\r\n        <td className=\"text-center\">\r\n          <span\r\n            className={\r\n              task.status === true\r\n                ? \"label label-danger\"\r\n                : \"label label-success\"\r\n            }\r\n            onClick={this.onUpdateStatus}\r\n          >\r\n            {task.status === true ? \"Kich Hoat\" : \"An\"}\r\n          </span>\r\n        </td>\r\n        <td className=\"text-center\">\r\n          <button type=\"button\" className=\"btn btn-warning\" onClick={this.onEditData} >\r\n            <span className=\"fas fa-pencil-alt\"></span> Sửa\r\n          </button>\r\n          &nbsp;\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-danger\"\r\n            onClick={this.onDeleteData}\r\n          >\r\n            <span className=\"fas fa-trash-alt\"></span> Xóa\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n  return {\r\n    onUpdateStatus: (id) => {\r\n      dispatch(actions.updateStatus(id));\r\n    },\r\n    onDeleteData: (id) => {\r\n      dispatch(actions.deleteTask(id));\r\n    },\r\n    onCloseFrom: () => {\r\n      dispatch(actions.closeFrom());\r\n    },\r\n    onOpenForm: () => {\r\n      dispatch(actions.openFrom());\r\n    },\r\n    onEditTask: (task) => {\r\n      dispatch(actions.editTask(task));\r\n    }\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskItem);\r\n","import React, { Component } from \"react\";\r\nimport TaskItem from \"./TaskItem\";\r\nimport { connect } from 'react-redux'\r\nimport * as actions from './../actions/index'\r\n\r\nclass TaskList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filterName: \"\",\r\n      filterStatus: -1 // all -1; active: 1; deactive: 0\r\n    };\r\n  }\r\n\r\n  onChange = e => {\r\n    var target = e.target;\r\n    var name = target.name;\r\n    var value = target.type === 'checkbox' ? target.checked : target.value;\r\n    // this.props.onFilter(\r\n    //   name === \"filterName\" ? value : this.state.filterName,\r\n    //   name === \"filterStatus\" ? value : this.state.filterStatus\r\n    // );\r\n    var filter = {\r\n      name: name === \"filterName\" ? value : this.state.filterName,\r\n      status: name === \"filterStatus\" ? value : this.state.filterStatus\r\n    };\r\n    this.props.onFilterTable(filter);\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    var { tasks, filterTable, keyword, sort } = this.props;\r\n    //filter\r\n    if (filterTable.name) {\r\n      tasks = tasks.filter(task => {\r\n        return task.name.toLowerCase().indexOf(filterTable.name.toLowerCase()) !== -1;\r\n      });\r\n    }\r\n\r\n    tasks = tasks.filter(task => {\r\n      if (filterTable.status === '-1' || filterTable.status === -1) {\r\n        return task;\r\n      } else {\r\n        return task.status === (filterTable.status === 1 ? true : false);\r\n      }\r\n    });\r\n\r\n    //search\r\n    tasks = tasks.filter(task => {\r\n      return task.name.toLowerCase().indexOf(keyword.toLowerCase()) !== -1;\r\n    });\r\n\r\n    //sort\r\n    if (sort.by === \"name\") {\r\n      tasks.sort((a, b) => {\r\n        if (a.name > b.name) return sort.by;\r\n        else if (a.name < b.name) return -sort.value;\r\n        else return 0;\r\n      });\r\n    } else {\r\n      tasks.sort((a, b) => {\r\n        if (a.status > b.status) return -sort.by;\r\n        else if (a.status < b.status) return sort.value;\r\n        else return 0;\r\n      });\r\n    }\r\n\r\n\r\n    var { filterName, filterStatus } = this.state;\r\n    var elmTasks = tasks.map((task, index) => {\r\n      return (\r\n        <TaskItem\r\n          key={task.id}\r\n          index={index}\r\n          task={task}\r\n        />\r\n      );\r\n    });\r\n\r\n    return (\r\n      <table className=\"table table-bordered table-hover mt-15\">\r\n        <thead>\r\n          <tr>\r\n            <th className=\"text-center\">STT</th>\r\n            <th className=\"text-center\">Tên</th>\r\n            <th className=\"text-center\">Trạng Thái</th>\r\n            <th className=\"text-center\">Hành Động</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>\r\n              <input\r\n                type=\"text\"\r\n                name=\"filterName\"\r\n                className=\"form-control\"\r\n                value={filterName}\r\n                onChange={this.onChange}\r\n              />\r\n            </td>\r\n            <td>\r\n              <select\r\n                className=\"form-control\"\r\n                name=\"filterStatus\"\r\n                value={filterStatus}\r\n                onChange={this.onChange}\r\n              >\r\n                <option value={-1}>Tất cả</option>\r\n                <option value={0}>Ẩn</option>\r\n                <option value={1}>Kích hoạt</option>\r\n              </select>\r\n            </td>\r\n            <td></td>\r\n          </tr>\r\n          {elmTasks}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    tasks: state.tasks,\r\n    filterTable: state.filterTable,\r\n    keyword: state.search,\r\n    sort: state.sort\r\n\r\n  }\r\n};\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n  return {\r\n    onFilterTable: (filter) => {\r\n      dispatch(actions.filterTask(filter));\r\n    }\r\n  };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList);","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport TaskForm from \"./components/TaskForm\";\nimport Control from \"./components/TaskControl\";\nimport TaskList from \"./components/TaskList\";\nimport { connect } from 'react-redux';\nimport * as actions from './actions/index'\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sortBy: \"name\",\n      sortValue: 1\n    };\n  }\n  // // load one save localStorate\n  // UNSAFE_componentWillMount() {\n  //   if (localStorage && localStorage.getItem(\"tasks\")) {\n  //     var tasks = JSON.parse(localStorage.getItem(\"tasks\"));\n  //     this.setState({\n  //       tasks: tasks\n  //     });\n  //   }\n  // }\n\n  // creat random id\n\n\n  onToggleFrom = () => {\n    // if (this.state.isShowForm && this.state.taskEditing !== null) {\n    //   this.setState({\n    //     isShowForm: true,\n    //     taskEditing: null\n    //   });\n    // } else {\n    //   this.setState({\n    //     isShowForm: !this.state.isShowForm,\n    //     taskEditing: null\n    //   });\n    // }\n    var {itemEditting} = this.props;\n    if (itemEditting && itemEditting.id !== '') {\n      this.props.onOpenForm();\n    }else{\n      this.props.onToggleFrom();\n    }\n\n    this.props.onClearTask({\n      id: '',\n      name: '',\n      staus: false\n    });\n  };\n\n  // onCloseFrom = () => {\n  //   this.setState({\n  //     isShowForm: false\n  //   });\n  // };\n\n  // onSubmit = data => {\n  //   var { tasks } = this.state;\n  //   if (data.id === \"\") {\n  //     data.id = this.generateID();\n  //     tasks.push(data);\n  //   } else {\n  //     //editing\n  //     var index = this.findIndex(data.id);\n  //     tasks[index] = data;\n  //   }\n  //   this.setState({\n  //     tasks: tasks,\n  //     taskEditing: null\n  //   });\n  //   localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  // };\n\n  // onUpdateStatus = id => {\n  //   var { tasks } = this.state;\n  //   var index = this.findIndex(id);\n  //   // var index = findIndex(tasks, task => {\n  //   //   return task.id === id;\n  //   // });\n  //   if (index !== -1) {\n  //     tasks[index].status = !tasks[index].status;\n  //     this.setState({\n  //       tasks: tasks\n  //     });\n  //     localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  //   }\n  // };\n  // findIndex = id => {\n  //   var { tasks } = this.state;\n  //   var result = -1;\n  //   tasks.forEach((task, index) => {\n  //     if (task.id === id) {\n  //       result = index;\n  //     }\n  //   });\n  //   return result;\n  // };\n\n  // onDeleteData = id => {\n  //   var { tasks } = this.state;\n  //   var index = this.findIndex(id);\n  //   if (index !== -1) {\n  //     tasks.splice(index, 1);\n  //     this.setState({\n  //       tasks: tasks\n  //     });\n  //     localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  //   }\n  //   this.onCloseFrom();\n  // };\n\n  // onShowFrom = () => {\n  //   this.setState({\n  //     isShowForm: true\n  //   });\n  // };\n  // onEditData = id => {\n  //   var { tasks } = this.state;\n  //   var index = this.findIndex(id);\n  //   var taskEditing = tasks[index];\n  //   this.setState({\n  //     taskEditing: taskEditing\n  //   });\n  //   this.onShowFrom();\n  // };\n\n  // onFilter = (filterName, filterStatus) => {\n  //   filterStatus = parseInt(filterStatus, 10);\n  //   this.setState({\n  //     filterName: filterName,\n  //     filterStatus: filterStatus\n  //   });\n  // };\n\n  // onSearch = keyword => {\n  //   this.setState({\n  //     keyword: keyword\n  //   });\n  // };\n\n  // onSort = (sortBy, sortValue) => {\n  //   this.setState({\n  //     sortBy: sortBy,\n  //     sortValue: sortValue\n  //   });\n  // };\n\n  render() {\n    // var {\n    //   //taskEditing,\n    //   // filterName,\n    //   // filterStatus,\n    //   // keyword,\n    //   // sortBy,\n    //   // sortValue\n    // } = this.state;\n\n    var { isDisplayFrom } = this.props;\n    // tasks = tasks.filter( task => {\n    //   return task.name.toLowerCase().indexOf(keyword.toLowerCase()) !== -1;\n    // });\n\n    // if (filterName) {\n    //   tasks = tasks.filter(task => {\n    //     return task.name.toLowerCase().indexOf(filterName.toLowerCase()) !== -1;\n    //   });\n    // }\n\n    //   tasks = tasks.filter(task => {\n    //   if (filterStatus === '-1' || filterStatus === -1) {\n    //     return task;\n    //   } else {\n    //     return task.status === (parseInt(filterStatus, 10) === 1 ? true : false);\n    //   }\n    // });\n\n\n    // if (keyword) {\n    //   tasks = tasks.filter(task => {\n    //     return task.name.toLowerCase().indexOf(keyword) !== -1;\n    //   });\n    // }\n\n    // if (sortBy === \"name\") {\n    //   tasks.sort((a, b) => {\n    //     if (a.name > b.name) return sortValue;\n    //     else if (a.name < b.name) return -sortValue;\n    //     else return 0;\n    //   });\n    // } else {\n    //   tasks.sort((a, b) => {\n    //     if (a.status > b.status) return -sortValue;\n    //     else if (a.status < b.status) return sortValue;\n    //     else return 0;\n    //   });\n    // }\n\n    // var elmTaskForm = isDisplayFrom === true ? (\n    //   <TaskForm\n    //     //onSubmit={this.onSubmit}\n    //     task={taskEditing}\n    //   />\n    // ) : (\n    //     \"\"\n    //   );\n    return (\n      <div className=\"container\">\n        <div className=\"text-center\">\n          <h1>Quản Lý Công Việc</h1>\n        </div>\n        <div className=\"row\">\n          <div\n            className={isDisplayFrom ? \"col-xs-4 col-sm-4 col-md-4 col-lg-4\" : \"\"}\n          >\n            <TaskForm\n            />\n          </div>\n          <div\n            className={\n              isDisplayFrom\n                ? \"col-xs-8 col-sm-8 col-md-8 col-lg-8\"\n                : \"col-xs-12 col-sm-12 col-md-12 col-lg-12\"\n            }\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              onClick={this.onToggleFrom}\n            >\n              <span className=\"fas fa-plus\"></span> Thêm Công Việc\n            </button>\n            &nbsp;\n            <Control\n              // sortBy={sortBy}\n              // sortValue={sortValue}\n            />\n            <TaskList\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isDisplayFrom: state.isDisplayFrom,\n    itemEditting: state.itemEditting\n  }\n};\n\nconst mapDispatchToProps = (dispatch, action) => {\n  return {\n    onToggleFrom: () => {\n      dispatch(actions.toggleFrom());\n    },\n    onClearTask: (task) => {\n      dispatch(actions.editTask(task));\n    },\n    onOpenForm: () =>{\n      dispatch(actions.openFrom());\n    },\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as types from './../constants/ActionTypes';\r\n\r\n\r\nvar s4 = () => {\r\n  return Math.floor((1 + Math.random()) * 0x10000)\r\n    .toString(16)\r\n    .substring(1);\r\n}\r\nvar generateID = () => {\r\n  return (\r\n    s4() +\r\n    s4() +\r\n    \"-\" +\r\n    s4() +\r\n    s4() +\r\n    s4() +\r\n    \"-\" +\r\n    s4() +\r\n    s4()\r\n  );\r\n}\r\n\r\nvar findIndex = (tasks, id) => {\r\n  var result = -1;\r\n  tasks.forEach((task, index) => {\r\n    if (task.id === id) {\r\n      result = index;\r\n    }\r\n  });\r\n  return result;\r\n};\r\nvar data = JSON.parse(localStorage.getItem('tasks'));\r\nvar initialState = data ? data : [];\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n  var id = \"\";\r\n  var index = -1;\r\n  switch (action.type) {\r\n    case types.LIST_ALL:\r\n      return state;\r\n    case types.ADD_TASK:\r\n      var task = {\r\n        id: action.task.id,\r\n        name: action.task.name,\r\n        status: (action.task.status === 'true' || action.task.status === true) ? true : false\r\n      }\r\n      if (!task.id) {\r\n        task.id = generateID();\r\n        state.push(task);\r\n      } else {\r\n        index = findIndex(state, task.id);\r\n        state[index] = task;\r\n      }\r\n      localStorage.setItem('tasks', JSON.stringify(state));\r\n      return [...state];\r\n    case types.UPDATE_STATUS:\r\n      id = action.id;\r\n      index = findIndex(state, id);\r\n      state[index] = {\r\n        ...state[index],\r\n        status: !state[index].status\r\n      }\r\n      //var clonTask = {...state[index]};\r\n      //clonTask.status = !clonTask.status;\r\n      // state.splice(index, 1); //c1\r\n      // state.push(clonTask);\r\n      //state[index] = clonTask; //c2\r\n\r\n      localStorage.setItem(\"tasks\", JSON.stringify(state));\r\n\r\n      return [...state];\r\n    case types.DELETE_TASK:\r\n      id = action.id;\r\n      index = findIndex(state, id);\r\n      state.splice(index, 1);\r\n      localStorage.setItem(\"tasks\", JSON.stringify(state));\r\n      return [...state];\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default myReducer;","import * as types from './../constants/ActionTypes'\r\n\r\nvar initialStore = false;\r\nvar myReducer = (state = initialStore, action) => {\r\n    switch (action.type) {\r\n        case types.TOGGLE_FORM:\r\n            return !state;\r\n        case types.OPEN_FORM:\r\n            return true;\r\n        case types.CLOSE_FORM:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default myReducer;","import * as types from './../constants/ActionTypes'\r\n\r\nvar initialStore = {\r\n    id: '',\r\n    name: '',\r\n    status: false\r\n};\r\nvar myReducer = (state = initialStore, action) => {\r\n    switch (action.type) {\r\n        case types.EDIT_TASK:\r\n\r\n            return action.task;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default myReducer;","import * as types from './../constants/ActionTypes'\r\n\r\nvar initialStore = {\r\n    name: '',\r\n    status: -1\r\n};\r\nvar myReducer = (state = initialStore, action) => {\r\n    switch (action.type) {\r\n        case types.FILTER_TABLE:\r\n            return {\r\n                name: action.filter.name,\r\n                status: parseInt(action.filter.status, 10)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default myReducer;","import * as types from './../constants/ActionTypes'\r\n\r\nvar initialStore = '';\r\nvar myReducer = (state = initialStore, action) => {\r\n    switch (action.type) {\r\n        case types.SEARCH:\r\n            return action.keyword;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default myReducer;","import * as types from './../constants/ActionTypes'\r\n\r\nvar initialStore = {\r\n    by: 'name',\r\n    value: 1 //1 thang, -1 giam\r\n};\r\nvar myReducer = (state = initialStore, action) => {\r\n    switch (action.type) {\r\n        case types.SORT:\r\n            return {\r\n                by: action.sort.by,\r\n                value: action.sort.value\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default myReducer;","import { combineReducers } from 'redux';\r\nimport tasks from './tasks';\r\nimport isDisplayFrom from './isDisplayFrom';\r\nimport itemEditting from './itemEditting';\r\nimport filterTable from './filterTable';\r\nimport search from './search';\r\nimport sort from './sort'\r\n\r\nconst myReducer = combineReducers({\r\n    tasks,\r\n    isDisplayFrom,\r\n    itemEditting,\r\n    filterTable,\r\n    search,\r\n    sort\r\n\r\n});\r\n\r\nexport default myReducer;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n//store\nimport { createStore } from \"redux\";\nimport myReducers from \"./reducers/index\";\nimport { Provider } from 'react-redux';\nconst store = createStore(\n    myReducers,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    );\n\nReactDOM.render(\n<Provider store={ store }>\n    <App />\n</Provider>, \ndocument.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}